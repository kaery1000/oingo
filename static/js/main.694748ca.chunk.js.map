{"version":3,"sources":["components/Header.js","components/Layout.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Menu","style","marginTop","Item","Link","to","position","Icon","name","Layout","props","Container","rel","href","children","Home","state","loadingData","this","setState","document","title","Dimmer","active","inverted","Loader","size","Grid","centered","stackable","Card","fluid","color","Content","Description","Button","primary","Component","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAIeA,EAAA,WACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAU,SACvBL,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KAAWN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,UAAT,UAEXR,EAAAC,EAAAC,cAACC,EAAA,EAAKA,KAAN,CAAWM,SAAS,SAClBT,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KAAWN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAWR,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,KAAK,yBAA/B,iBCNJC,EAAA,SAAAC,GACb,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAAA,QAAMa,IAAI,aAAaC,KAAK,wEAC5BhB,EAAAC,EAAAC,cAACH,EAAD,MACCc,EAAMI,kFCoCEC,6MAxCbC,MAAQ,CACNC,aAAY,8LAIZC,KAAKC,SAAS,CAACF,aAAY,IAC3BG,SAASC,MAAQ,QACjBH,KAAKC,SAAS,CAACF,aAAY,uIAI3B,OAAGC,KAAKF,MAAMC,YAERpB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACrB3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,KAAK,WAAb,eAMN7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,GAAChC,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACnCF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,OAAK,EAACC,MAAM,SAChBnC,EAAAC,EAAAC,cAAC+B,EAAA,EAAKG,QAAN,KACEpC,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAC+B,EAAA,EAAKlC,OAAN,KAAaC,EAAAC,EAAAC,cAAA,wBACbF,EAAAC,EAAAC,cAAC+B,EAAA,EAAKI,YAAN,KACErC,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,KAAIR,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQC,SAAO,GAAf,WACbvC,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,uBA/BTsC,aCeJC,mLAZX,OACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW7B,cANhCsB,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.694748ca.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Menu, Icon} from 'semantic-ui-react';\n\nexport default () => {\n  return (\n    <Menu style={{ marginTop:'10px' }}>\n      <Menu.Item><Link to='/oingo'>Oingo</Link></Menu.Item>\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item><Link to='/oingo/#'><Icon name='address card outline' />DummyLink</Link></Menu.Item>\n      </Menu.Menu>\n    </Menu>\n  );\n};","import React from 'react';\nimport {Container} from 'semantic-ui-react';\nimport Header from './Header';\n\nexport default props => {\n  return (\n    <Container>\n      <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css\"></link>\n      <Header />\n      {props.children}\n    </Container>\n  );\n};","import React, { Component } from 'react';\nimport {Grid, Loader, Dimmer, Card, Button} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component {\n  state = {\n    loadingData:false,\n  }\n\n  async componentDidMount(){\n    this.setState({loadingData:true});\n    document.title = \"Oingo\";\n    this.setState({loadingData:false});\n  }\n\n  render() {\n    if(this.state.loadingData){\n      return (\n          <Dimmer active inverted>\n            <Loader size='massive'>Loading...</Loader>\n          </Dimmer>\n      );\n    }\n\n    return (\n      <div>\n        <h1></h1>\n        <Grid centered stackable><br /><br /><br />\n          <Card fluid color='green'>\n            <Card.Content>\n              <br /><br />\n              <Card.Header><h1>Hi There!</h1></Card.Header>\n              <Card.Description>\n                <br /><br />\n                <Link to='/'><Button primary>Button</Button></Link>\n                <br /><br /><br />\n              </Card.Description>\n            </Card.Content>\n          </Card>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Layout from './components/Layout';\nimport Home from './components/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/oingo\" component={Home} />\n          </Switch>\n        </Layout>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}